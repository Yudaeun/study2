#include <bits/stdc++.h>

using namespace std;

// 이진 탐색 소스코드 구현(반복문)
int binarySearch(vector<int>& arr, int target, int start, int end){
	while(start<=end){
		int mid=(start+end)/2;
		// 찾은 경우에 중간점 인덱스를 반환한다.
		if (arr[mid]==target) return mid;
		// 중간점의 값보다 찾고자 하는 값이 작다면 왼쪽을 확인한다.
		else if (arr[mid]>target) end=mid-1;
		// 중간점의 값보다 찾고자 하는 값이 크다면 오른쪽을 확인한다.
		else start=mid+1;
	}
	return -1;
} 

// N(가게의 부품 개수)와 M(손님이 확인을 요청한 부품 개수)
int n,m;
//가게에 있는 전체 부품 번호들
vector<int> arr; //벡터는 array와 비슷하지만 정해진 크기가 없는 linked list와  비슷한 자료형
//손님이 확인을 요청한 부품 번호들
vector<int> targets;

int main(void){
	cin>>n;
	for(int i=0;i<n;i++){
		int x;
		cin>>x;
		arr.push_back(x); //push_back은 벡터의 끝에 요소를 추가하는 함수 
	}
	
	//이진 탐색을 수행하기 위해 사전에 정렬을 수행한다.
	sort(arr.begin(),arr.end());
	
	cin>>m;
	for(int i=0;i<m;i++){
		int target;
		cin>>target;
		targets.push_back(target);
	} 
	//손님이 확인 요청한 부품 번호를 하나씩 확인한다.
	for(int i=0;i<m;i++){
		//해당 부품이 존재하는지 확인한다.
		int result=binarySearch(arr,targets[i],0,n-1);
		if(result!=-1){
			cout<<"yes"<<' ';
		} 
		else{
			cout<<"no"<<' ';
		}
	} 
} 
